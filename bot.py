import os
import logging
import requests
import urllib.parse
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv
import io
from gtts import gTTS
import tempfile
from googletrans import Translator  # –ù—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: pip install googletrans==4.0.0-rc1
import asyncio


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
translator = Translator()

# OpenWeatherMap API
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")
WEATHER_URL = "https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/{city}?key={WEATHER_API_KEY}"


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class WeatherStates(StatesGroup):
    waiting_for_city = State()


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã\n–Ø –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ.\n–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é.")


# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help ‚Äî –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n"
        "/forecast ‚Äî –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã (–≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞)\n"
        "–¢–∞–∫–∂–µ —è –º–æ–≥—É —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–µ –º–Ω–µ —Ñ–æ—Ç–æ –≤ –ø–∞–ø–∫—É IMG –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–æ–±—â–µ–Ω–∏—è!"
    )


# –ö–æ–º–∞–Ω–¥–∞ /forecast
@dp.message(Command("forecast"))
async def cmd_forecast(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    await state.set_state(WeatherStates.waiting_for_city)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
@dp.message(WeatherStates.waiting_for_city)
async def get_weather(message: types.Message, state: FSMContext):
    city = message.text.strip()
    encoded_city = urllib.parse.quote(city)

    url = f"https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/{encoded_city}"
    params = {
        'key': WEATHER_API_KEY,
        'unitGroup': 'metric',
        'include': 'current',  # –∏–ª–∏ 'days'
        'lang': 'ru'
    }

    try:
        response = requests.get(url, params=params)
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"–û—Ç–≤–µ—Ç: {response.text[:300]}...")  # –ü–µ—á–∞—Ç–∞–µ–º –Ω–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

        if response.status_code != 200:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –∏–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        data = response.json()

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        location = data.get("resolvedAddress", city)
        today = data["days"][0]
        temp = today["temp"]
        desc = today.get("description", today["conditions"])
        humidity = today["humidity"]
        wind = today["windspeed"]

        msg = (
            f"üåç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location}\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp} ¬∞C\n"
            f"‚òÅ –ü–æ–≥–æ–¥–∞: {desc}\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"üí® –í–µ—Ç–µ—Ä: {wind} –∫–º/—á"
        )
        await message.answer(msg)

    except requests.exceptions.RequestException as e:
        await message.answer("üì° –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏:", e)
    except ValueError as e:  # JSON decode error
        await message.answer("üìÑ –ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.")
        print("–û—à–∏–±–∫–∞ JSON:", e)
        print("–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:", response.text)
    except Exception as e:
        await message.answer("‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.")
        print("–û—à–∏–±–∫–∞:", e)
    finally:
        await state.clear()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def create_voice_message(text: str, lang: str = 'ru') -> io.BytesIO:
    """–°–æ–∑–¥–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    tts = gTTS(text, lang=lang, slow=False, tld='com' if lang == 'en' else 'ru')

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
    voice_buffer = io.BytesIO()
    tts.write_to_fp(voice_buffer)
    voice_buffer.seek(0)

    return voice_buffer


# –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ (–±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫)
def simple_translate(text: str) -> str:
    """–ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–ª–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    translations = {
        "–í—ã –Ω–∞–ø—Ä–∞–≤–∏–ª–∏ –º–Ω–µ": "You sent me",
        "–Ø —Ç–∞–∫–æ–µ –Ω–µ —É–º–µ—é": "I don't know how to do this",
        "–Ø –≤—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è—é –≤–∞—à–∏ —Ñ–æ—Ç–æ": "I execute commands or save your photos",
        "–ü—Ä–∏–≤–µ—Ç": "Hello",
        "–ü–æ–∫–∞": "Goodbye",
        "–°–ø–∞—Å–∏–±–æ": "Thank you",
        "–ü–æ–≥–æ–¥–∞": "Weather",
        "–≥–æ—Ä–æ–¥": "city",
        "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": "temperature"
    }

    result = text
    for ru, en in translations.items():
        result = result.replace(ru, en)

    return result


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(lambda message: message.photo)
async def handle_photo(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É IMG, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not os.path.exists("IMG"):
        os.makedirs("IMG")
        logging.info("–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ IMG")

    # –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–æ—Ç–æ (—Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Ä–∞–∑–º–µ—Ä–æ–º)
    photo = message.photo[-1]
    file_id = photo.file_id

    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö Telegram
    file = await bot.get_file(file_id)
    file_path = file.file_path

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    file_extension = file_path.split('.')[-1]
    file_name = f"IMG/photo_{file_id}.{file_extension}"

    # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    await bot.download_file(file_path, file_name)

    await message.answer(f"‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫: {file_name}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(lambda message: message.voice)
async def handle_voice(message: types.Message):
    await message.answer("üéô –Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ù–æ –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –µ–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
@dp.message(lambda message: message.text and not message.text.startswith('/'))
async def handle_text(message: types.Message):
    user_text = message.text

    try:
        # –ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ (–±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫)
        english_text = simple_translate(user_text)

        # –°–æ–∑–¥–∞–µ–º —Ä—É—Å—Å–∫–∏–π –æ—Ç–≤–µ—Ç
        russian_response = f"–í—ã –Ω–∞–ø—Ä–∞–≤–∏–ª–∏ –º–Ω–µ {user_text}. –Ø —Ç–∞–∫–æ–µ –Ω–µ —É–º–µ—é. –Ø –≤—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è—é –≤–∞—à–∏ —Ñ–æ—Ç–æ."

        # –°–æ–∑–¥–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –æ—Ç–≤–µ—Ç
        english_response = f"You sent me {english_text}. I don't know how to do this. I execute commands or save your photos."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä—É—Å—Å–∫–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voice_buffer_ru = await create_voice_message(russian_response, 'ru')
        await message.answer_voice(
            types.BufferedInputFile(voice_buffer_ru.read(), filename="voice_message_ru.mp3"),
            caption=f"–í—ã —Å–∫–∞–∑–∞–ª–∏: {user_text}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voice_buffer_en = await create_voice_message(english_response, 'en')
        await message.answer_voice(
            types.BufferedInputFile(voice_buffer_en.read(), filename="voice_message_en.mp3"),
            caption=f"English: {english_response}"
        )

    except Exception as e:
        # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ –¥—Ä—É–≥–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã)
@dp.message()
async def echo(message: types.Message):
    # –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è,
    # –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–∏–∫–µ—Ä—ã, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Ç.–¥.)
    text_response = "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /start, /help –∏–ª–∏ /forecast"

    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voice_buffer = await create_voice_message(text_response)
        await message.answer_voice(
            types.BufferedInputFile(voice_buffer.read(), filename="voice_message.mp3"),
            caption="–ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        )
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        await message.answer(text_response)
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    dp.run_polling(bot)