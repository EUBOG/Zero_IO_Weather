import os
import logging
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv
import urllib.parse

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()

# OpenWeatherMap API
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")
WEATHER_URL = "https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/{city}?key={WEATHER_API_KEY}"


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class WeatherStates(StatesGroup):
    waiting_for_city = State()


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã\n–Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã.\n–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é.")


# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help ‚Äî –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n"
        "/forecast ‚Äî –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã (–≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞)"
    )


# –ö–æ–º–∞–Ω–¥–∞ /forecast
@dp.message(Command("forecast"))
async def cmd_forecast(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    await state.set_state(WeatherStates.waiting_for_city)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
@dp.message(WeatherStates.waiting_for_city)
async def get_weather(message: types.Message, state: FSMContext):
    city = message.text.strip()
    encoded_city = urllib.parse.quote(city)

    url = f"https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/{encoded_city}"
    params = {
        'key': WEATHER_API_KEY,
        'unitGroup': 'metric',
        'include': 'current',  # –∏–ª–∏ 'days'
        'lang': 'ru'
    }

    try:
        response = requests.get(url, params=params)
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"–û—Ç–≤–µ—Ç: {response.text[:300]}...")  # –ü–µ—á–∞—Ç–∞–µ–º –Ω–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

        if response.status_code != 200:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –∏–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        data = response.json()

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        location = data.get("resolvedAddress", city)
        today = data["days"][0]
        temp = today["temp"]
        desc = today.get("description", today["conditions"])
        humidity = today["humidity"]
        wind = today["windspeed"]

        msg = (
            f"üåç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location}\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp} ¬∞C\n"
            f"‚òÅ –ü–æ–≥–æ–¥–∞: {desc}\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"üí® –í–µ—Ç–µ—Ä: {wind} –∫–º/—á"
        )
        await message.answer(msg)

    except requests.exceptions.RequestException as e:
        await message.answer("üì° –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏:", e)
    except ValueError as e:  # JSON decode error
        await message.answer("üìÑ –ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.")
        print("–û—à–∏–±–∫–∞ JSON:", e)
        print("–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:", response.text)
    except Exception as e:
        await message.answer("‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.")
        print("–û—à–∏–±–∫–∞:", e)
    finally:
        await state.clear()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    dp.run_polling(bot)