import os
import logging
import requests
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.utils.markdown import hbold, hitalic
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()


def get_joke():
    """–®—É—Ç–∫–∞ ‚Äî –∑–∞–º–µ–Ω–∞ icanhazdadjoke.com"""
    try:
        response = requests.get("https://v2.jokeapi.dev/joke/Any?safe-mode")
        data = response.json()
        if data["type"] == "single":
            return data["joke"]
        else:
            return f"{data['setup']}\n{data['delivery']}"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à—É—Ç–∫–∏: {e}"


def get_bored_activity():
    """–ó–∞–Ω—è—Ç–∏–µ ‚Äî –∑–∞–º–µ–Ω–∞ boredapi.com"""
    try:
        response = requests.get("https://apis.scrimba.com/bored/api/activity")
        data = response.json()

        # –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–∏–ø–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
        type_translations = {
            "education": "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
            "recreational": "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
            "social": "–°–æ—Ü–∏–∞–ª—å–Ω–æ–µ",
            "diy": "–°–¥–µ–ª–∞–π —Å–∞–º",
            "charity": "–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
            "cooking": "–ì–æ—Ç–æ–≤–∫–∞",
            "relaxation": "–û—Ç–¥—ã—Ö",
            "music": "–ú—É–∑—ã–∫–∞",
            "busywork": "–ó–∞–Ω—è—Ç–æ—Å—Ç—å"
        }

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–∏–ø, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ, –∏–Ω–∞—á–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        translated_type = type_translations.get(data['type'], data['type'].capitalize())

        return (
            f"üí° *{data['activity']}*\n"
            f"–¢–∏–ø: {translated_type}\n"
            f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {data['participants']}\n"
            f"–¶–µ–Ω–∞: {data['price']}/10"
        )
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}"


def get_number_fact():
    """–§–∞–∫—Ç –æ —á–∏—Å–ª–µ ‚Äî –∑–∞–º–µ–Ω–∞ numbersapi.com"""
    try:
        response = requests.get("https://uselessfacts.jsph.pl/random.json?language=ru")
        data = response.json()
        return data["text"]  # –¢–µ–∫—Å—Ç —Ñ–∞–∫—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–∫—Ç–∞: {e}"

def get_cat_image():
    """–ö–æ—Ç–∏–∫ ‚Äî –∑–∞–º–µ–Ω–∞ random.cat"""
    try:
        response = requests.get("https://api.thecatapi.com/v1/images/search")
        data = response.json()
        return data[0]["url"]
    except Exception as e:
        return None  # –í–µ—Ä–Ω—ë–º None, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É –≤ —Ö–µ–Ω–¥–ª–µ—Ä–µ


def get_pokemon_info(pokemon_name):
    """–ü–æ–∫–µ–º–æ–Ω ‚Äî —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"""
    try:
        url = f"https://pokeapi.co/api/v2/pokemon/{pokemon_name.lower()}"
        response = requests.get(url)
        if response.status_code != 200:
            return f"‚ùå –ü–æ–∫–µ–º–æ–Ω '{pokemon_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –∏–º—è."

        data = response.json()
        abilities = ", ".join([a['ability']['name'] for a in data['abilities'][:3]])
        types = ", ".join([t['type']['name'] for t in data['types']])
        image_url = data['sprites']['other']['official-artwork']['front_default']

        return (
            f"üåü *{data['name'].capitalize()}*\n"
            f"–¢–∏–ø—ã: {types}\n"
            f"–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏: {abilities}\n"
            f"–†–æ—Å—Ç: {data['height'] / 10} –º\n"
            f"–í–µ—Å: {data['weight'] / 10} –∫–≥\n"
            f"[–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å]({image_url})"
        )
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∫–µ–º–æ–Ω–µ: {e}"


# --- –•–ï–ù–î–õ–ï–†–´ (–Ω–µ –º–µ–Ω—è–ª–∏—Å—å) ---

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø BotMaster ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/fact ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç –æ —á–∏—Å–ª–µ\n"
        "/bored ‚Äî —á–µ–º –∑–∞–Ω—è—Ç—å—Å—è, –∫–æ–≥–¥–∞ —Å–∫—É—á–Ω–æ\n"
        "/cat ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ—Ç–∏–∫\n"
        "/joke ‚Äî —à—É—Ç–∫–∞ –æ—Ç –ø–∞–ø—ã\n"
        "/pokemon <–∏–º—è> ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫–µ–º–æ–Ω–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /pokemon pikachu)"
    )


@dp.message(Command("fact"))
async def cmd_fact(message: Message):
    fact_text = get_number_fact()
    await message.answer(fact_text)


@dp.message(Command("bored"))
async def cmd_bored(message: Message):
    activity = get_bored_activity()
    await message.answer(activity, parse_mode="Markdown")


@dp.message(Command("cat"))
async def cmd_cat(message: Message):
    cat_url = get_cat_image()
    if cat_url:
        await message.answer_photo(cat_url)
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–æ—Ç–∏–∫–∞ üòø")


@dp.message(Command("joke"))
async def cmd_joke(message: Message):
    joke_text = get_joke()
    await message.answer(joke_text)


@dp.message(Command("pokemon"))
async def cmd_pokemon(message: Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2 or not args[1].strip():
        await message.answer("‚ùó –£–∫–∞–∂–∏ –∏–º—è –ø–æ–∫–µ–º–æ–Ω–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: /pokemon pikachu")
        return

    pokemon_name = args[1].strip()
    info = get_pokemon_info(pokemon_name)
    await message.answer(info, parse_mode="Markdown", disable_web_page_preview=False)


# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
async def main():
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())