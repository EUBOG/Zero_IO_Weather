import os
import asyncio
import random

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

# import sqlite3
import aiosqlite  # –í–º–µ—Å—Ç–æ sqlite3 ‚Äî –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
import aiohttp
import logging
import requests

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()

# –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
button_consent = KeyboardButton(text="–î–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
button_unconsent = KeyboardButton(text="–û—Ç–∑—ã–≤ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
button_reg = KeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–µ")
button_exchange_rates = KeyboardButton(text="–ö—É—Ä—Å –≤–∞–ª—é—Ç")
button_tips = KeyboardButton(text="–°–æ–≤–µ—Ç—ã –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏")
button_finances = KeyboardButton(text="–õ–∏—á–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å—ã")

keyboards = ReplyKeyboardMarkup(keyboard=[
    [button_consent],
    [button_unconsent],
    [button_reg, button_exchange_rates],
    [button_tips, button_finances]
    ], resize_keyboard=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
DB_PATH = 'user.db'

async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id INTEGER UNIQUE,
                name TEXT,
                consent_status TEXT DEFAULT 'N',  -- N = –Ω–µ—Ç, Y = –¥–∞
                consent_date TEXT,
                unconsent_date TEXT,
                category1 TEXT,
                category2 TEXT,
                category3 TEXT,
                expenses1 REAL,
                expenses2 REAL,
                expenses3 REAL
            )
        ''')
        await db.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

# --- FSM –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---
class FinancesForm(StatesGroup):
    category1 = State()
    expenses1 = State()
    category2 = State()
    expenses2 = State()
    category3 = State()
    expenses3 = State()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def send_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ª–∏—á–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫.\n\n"
        "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
        "1. –î–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n"
        "2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è (—ç—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–æ–≥–ª–∞—Å–∏–∏).\n\n"
        "–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–æ–∑–≤–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ.",
        reply_markup=keyboards
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–æ–≥–ª–∞—Å–∏—è (—Å—Ä–∞–∑—É –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
@dp.message(F.text == "–î–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
async def consent(message: Message):
    telegram_id = message.from_user.id
    name = message.from_user.full_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –∏–º–µ–Ω–∏"

    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('SELECT * FROM users WHERE telegram_id = ?', (telegram_id,))
        user = await cursor.fetchone()

        if user:
            if user[3] == "Y":  # consent_status
                await message.answer(f"‚úÖ –í–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ –±—ã–ª–æ –ø–æ–ª—É—á–µ–Ω–æ: {user[4]}") # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–∞—Ç—É —Å–æ–≥–ª–∞—Å–∏—è
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await db.execute(
                    'UPDATE users SET consent_status = ?, consent_date = datetime("now") WHERE telegram_id = ?',
                    ("Y", telegram_id)
                )
                await db.commit()
                await message.answer("‚úÖ –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–µ–Ω–æ!")
        else:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            await db.execute(
                'INSERT INTO users (telegram_id, name, consent_status, consent_date) VALUES (?, ?, ?, datetime("now"))',
                (telegram_id, name, "Y")
            )
            await db.commit()
            await message.answer("‚úÖ –í—ã –¥–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–∑—ã–≤–∞ —Å–æ–≥–ª–∞—Å–∏—è (–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Å —Ü–µ–ª—å—é —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø–µ—Ä–∏–æ–¥–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å–æ–≥–ª–∞—Å–∏—è)
@dp.message(F.text == "–û—Ç–∑—ã–≤ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
async def unconsent(message: Message):
    telegram_id = message.from_user.id

    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('SELECT * FROM users WHERE telegram_id = ?', (telegram_id,))
        user = await cursor.fetchone()

        if not user:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            return

        if user[3] == "N":
            await message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –æ—Ç–æ–∑–≤–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ: {user[5]}")
            return

        await db.execute(
            'UPDATE users SET consent_status = ?, unconsent_date = datetime("now") WHERE telegram_id = ?',
            ("N", telegram_id)
        )
        await db.commit()
        await message.answer("üö´ –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç–æ–∑–≤–∞–Ω–æ. –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∑–∞–∫–æ–Ω–æ–º.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.message(F.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–µ")
async def registration(message: Message):
    telegram_id = message.from_user.id
    name = message.from_user.full_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"

    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('SELECT * FROM users WHERE telegram_id = ?', (telegram_id,))
        user = await cursor.fetchone()

        if user:
            if user[3] == "Y":
                await message.answer("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –¥–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ!")
            else:
                await message.answer("‚ö†Ô∏è –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –Ω–æ –Ω–µ –¥–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ. –ù–∞–∂–º–∏—Ç–µ ¬´–î–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ¬ª.")
        else:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º, –Ω–æ –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è
            await db.execute(
                'INSERT INTO users (telegram_id, name) VALUES (?, ?)',
                (telegram_id, name)
            )
            await db.commit()
            await message.answer("üìå –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –Ω–æ –Ω–µ –¥–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ ¬´–î–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ¬ª.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
@dp.message(F.text == "–ö—É—Ä—Å –≤–∞–ª—é—Ç")
async def exchange_rates(message: Message):
    url = "https://v6.exchangerate-api.com/v6/09edf8b2bb246e1f801cbfba/latest/USD"
    try:
        response = requests.get(url)
        data = response.json()
        if response.status_code != 200:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç!")
            return
        usd_to_rub = data['conversion_rates']['RUB']
        eur_to_usd = data['conversion_rates']['EUR']

        euro_to_rub = eur_to_usd * usd_to_rub

        await message.answer(f"1 USD - {usd_to_rub:.2f}  RUB\n"
                             f"1 EUR - {euro_to_rub:.2f}  RUB")


    except:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç —Å–æ–≤–µ—Ç–æ–≤ –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏
@dp.message(F.text == "–°–æ–≤–µ—Ç—ã –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏")
async def send_tips(message: Message):
    tips = [
        "–°–æ–≤–µ—Ç 1: –í–µ–¥–∏—Ç–µ –±—é–¥–∂–µ—Ç –∏ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–≤–æ–∏–º–∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏.",
        "–°–æ–≤–µ—Ç 2: –û—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ —á–∞—Å—Ç—å –¥–æ—Ö–æ–¥–æ–≤ –Ω–∞ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è.",
        "–°–æ–≤–µ—Ç 3: –ü–æ–∫—É–ø–∞–π—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–æ —Å–∫–∏–¥–∫–∞–º –∏ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞–º.",
        "–°–æ–≤–µ—Ç 4: –•–æ–¥–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω —Å—ã—Ç—ã–º.",
        "–°–æ–≤–µ—Ç 5: –ö –∫–∞–∂–¥–æ–º—É —à–æ–ø–∏–Ω–≥—É –≥–æ—Ç–æ–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –∏ –Ω–µ –ø–æ–∫—É–ø–∞–π—Ç–µ –Ω–∏—á–µ–≥–æ, –∫—Ä–æ–º–µ —Ç–æ–≥–æ, —á—Ç–æ –≤ —Å–ø–∏—Å–∫–µ.",
        "–°–æ–≤–µ—Ç 6: –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –æ–±—Ö–æ–¥–∏—Ç—å—Å—è –±–µ–∑ –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏ –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –∫–∞—Ä—Ç."
    ]
    tip = random.choice(tips)
    await message.answer(tip)

# –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ª–∏—á–Ω—ã–º —Ñ–∏–Ω–∞–Ω—Å–∞–º
@dp.message(F.text == "–õ–∏—á–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å—ã")
async def finances(message: Message, state: FSMContext):
    telegram_id = message.from_user.id

    # –°–ø–µ—Ä–≤–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –¥–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('SELECT consent_status FROM users WHERE telegram_id = ?', (telegram_id,))
        user = await cursor.fetchone()

        if not user or user[0] != "Y":
            await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –¥–∞–π—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö!")
            return

    # –ï—Å–ª–∏ –≤—Å—ë –æ–∫ ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
    await state.set_state(FinancesForm.category1)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ï–¥–∞'):")

# –®–∞–≥ 1: –í–≤–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 1
@dp.message(FinancesForm.category1)
async def process_category1(message: Message, state: FSMContext):
    await state.update_data(category1=message.text)
    await state.set_state(FinancesForm.expenses1)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≤ —Ä—É–±–ª—è—Ö):")

# –®–∞–≥ 2: –í–≤–æ–¥ —Å—É–º–º—ã 1
@dp.message(FinancesForm.expenses1)
async def process_expenses1(message: Message, state: FSMContext):
    try:
        expenses = float(message.text)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 500.0)")
        return

    await state.update_data(expenses1=expenses)
    await state.set_state(FinancesForm.category2)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤:")

# –®–∞–≥ 3: –í–≤–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 2
@dp.message(FinancesForm.category2)
async def process_category2(message: Message, state: FSMContext):
    await state.update_data(category2=message.text)
    await state.set_state(FinancesForm.expenses2)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≤ —Ä—É–±–ª—è—Ö):")

# –®–∞–≥ 4: –í–≤–æ–¥ —Å—É–º–º—ã 2
@dp.message(FinancesForm.expenses2)
async def process_expenses2(message: Message, state: FSMContext):
    try:
        expenses = float(message.text)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 500.0)")
        return

    await state.update_data(expenses2=expenses)
    await state.set_state(FinancesForm.category3)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ—Ç—å—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤:")

# –®–∞–≥ 5: –í–≤–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 3
@dp.message(FinancesForm.category3)
async def process_category3(message: Message, state: FSMContext):
    await state.update_data(category3=message.text)
    await state.set_state(FinancesForm.expenses3)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≤ —Ä—É–±–ª—è—Ö):")

# –®–∞–≥ 6: –í–≤–æ–¥ —Å—É–º–º—ã 3 ‚Üí –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
@dp.message(FinancesForm.expenses3)
async def process_expenses3(message: Message, state: FSMContext):
    try:
        expenses = float(message.text)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 500.0)")
        return


    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    category1 = data.get("category1")
    expenses1 = data.get("expenses1")
    category2 = data.get("category2")
    expenses2 = data.get("expenses2")
    category3 = data.get("category3")
    expenses3 = expenses  # –¢–æ–ª—å–∫–æ —á—Ç–æ –≤–≤–µ–¥—ë–Ω–Ω–∞—è —Å—É–º–º–∞
    telegram_id = message.from_user.id

    # ‚úÖ –ê–°–ò–ù–•–†–û–ù–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –í –ë–ê–ó–ï –î–ê–ù–ù–´–•
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('''
            UPDATE users 
            SET category1 = ?, expenses1 = ?, 
                category2 = ?, expenses2 = ?, 
                category3 = ?, expenses3 = ?
            WHERE telegram_id = ?
        ''', (
            category1, expenses1,
            category2, expenses2,
            category3, expenses3,
            telegram_id
        ))
        await db.commit()  # ‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ! –ë–µ–∑ —ç—Ç–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è!

    await state.clear()
    await message.answer(
        "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n\n"
        f"1. {category1}: {expenses1} ‚ÇΩ\n"
        f"2. {category2}: {expenses2} ‚ÇΩ\n"
        f"3. {category3}: {expenses3} ‚ÇΩ"
    )


# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    await init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())