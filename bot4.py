import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.markdown import hbold
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()


# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help ‚Äî –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n"
        "/links ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –≤—ã–∑–æ–≤–∞ —Å—Å—ã–ª–æ–∫\n"
        "/dynamic ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ –æ–ø—Ü–∏–π\n"
        "–ï—Å–ª–∏ —Ö–æ–∑—è–∏–Ω –∑–∞—Ö–æ—á–µ—Ç, —è –µ—â–µ —á—Ç–æ-–Ω–∏–±—É–¥—å —Å–¥–µ–ª–∞—é!"
    )

# ========== –ó–ê–î–ê–ù–ò–ï 1: /start —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ ==========
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü—Ä–∏–≤–µ—Ç"), KeyboardButton(text="–ü–æ–∫–∞")]
        ],
        resize_keyboard=True,  # –ü–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ —ç–∫—Ä–∞–Ω
        one_time_keyboard=False  # –ö–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–æ–∫)
@dp.message(lambda message: message.text in ["–ü—Ä–∏–≤–µ—Ç", "–ü–æ–∫–∞"])
async def handle_greetings(message: types.Message):
    user_first_name = message.from_user.first_name or "–¥—Ä—É–≥"

    if message.text == "–ü—Ä–∏–≤–µ—Ç":
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{user_first_name}</b>!", parse_mode="HTML")
    elif message.text == "–ü–æ–∫–∞":
        await message.answer(f"–î–æ —Å–≤–∏–¥–∞–Ω–∏—è, <b>{user_first_name}</b>!", parse_mode="HTML")


# ========== –ó–ê–î–ê–ù–ò–ï 2: /links —Å URL-–∫–Ω–æ–ø–∫–∞–º–∏ ==========
@dp.message(Command("links"))
async def cmd_links(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üì∞ –ù–æ–≤–æ—Å—Ç–∏", url="https://news.yandex.ru")],
            [InlineKeyboardButton(text="üéµ –ú—É–∑—ã–∫–∞", url="https://music.yandex.ru")],
            [InlineKeyboardButton(text="üé¨ –í–∏–¥–µ–æ", url="https://youtube.com")]
        ]
    )
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ:", reply_markup=keyboard)


# ========== –ó–ê–î–ê–ù–ò–ï 3: /dynamic ‚Äî –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ==========
@dp.message(Command("dynamic"))
async def cmd_dynamic(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ –æ–ø—Ü–∏–π", callback_data="show_more")]
        ]
    )
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: "–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ"
@dp.callback_query(lambda c: c.data == "show_more")
async def show_more_options(callback: types.CallbackQuery):
    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    new_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û–ø—Ü–∏—è 1", callback_data="option_1")],
            [InlineKeyboardButton(text="–û–ø—Ü–∏—è 2", callback_data="option_2")]
        ]
    )

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=new_keyboard
    )
    await callback.answer()  # –°–∫—Ä—ã–≤–∞–µ–º "–∫—Ä—É–∂–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: "–û–ø—Ü–∏—è 1" –∏ "–û–ø—Ü–∏—è 2"
@dp.callback_query(lambda c: c.data in ["option_1", "option_2"])
async def handle_option(callback: types.CallbackQuery):
    option = callback.data.replace("option_", "")
    await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>–û–ø—Ü–∏—è {option}</b>", parse_mode="HTML")
    await callback.answer()  # –°–∫—Ä—ã–≤–∞–µ–º "–∫—Ä—É–∂–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏"



# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())